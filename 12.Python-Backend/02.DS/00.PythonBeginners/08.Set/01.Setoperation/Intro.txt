et Operations
We can also perform various operations on sets in Python. We can remove elements from a set using the remove() function. If the element is not present in the set, a KeyError will be raised.

my_set = {1, 2, 3}

my_set.remove(2)

print(my_set)  # Output: {1, 3}

my_set.remove(4)  # Raises KeyError
Just like with lists, we can loop over elements within a set using for loops. The difference is that we can't access elements by index because sets are unordered. The order that we loop over a set is not guaranteed.

my_set = {1, 2, 3}

for element in my_set:
    print(element)
We can also convert a list into a set by passing the list into the set() function. We can then convert the set back into a list by passing it into the list() function. This is an easy way to remove duplicates from a list.

my_list = [1, 2, 3, 4, 5, 1, 2, 5]

my_set = set(my_list)

print(my_set)  # Output: {1, 2, 3, 4, 5}

my_list_no_duplicates = list(my_set)
Just like with lists, we can also use the in keyword to check if an element is present in a set.

my_set = {"Cat", "Dog", "Mouse"}

contains_cat = "Cat" in my_set   # True
contains_lion = "Lion" in my_set # False
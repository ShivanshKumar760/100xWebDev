List Slicing
Just like with strings, we can also slice lists. We can extract a portion of a list by specifying a start and end index. The syntax is similar to slicing strings:

my_list = [1, 2, 3, 4, 5]

print(my_list[1:3])  # Output: [2, 3]

print(my_list[:3])   # Output: [1, 2, 3]

print(my_list[2:])   # Output: [3, 4, 5]

print(my_list[::-1]) # Output: [5, 4, 3, 2, 1]
To review, we can get a portion of the list by specifying the start and end index. If we omit the start index, it will default to the beginning of the list. If we omit the end index, it will default to the end of the list. We can also specify a negative step, after two colons, to reverse the list.

It's important to note, that none of these operations modify the original list. They only return a new list with the specified slice.

To take things a step further, what if we used a negative index?

my_list = [1, 2, 3, 4, 5]

print(my_list[-1]) # Output: 5
print(my_list[-2]) # Output: 4
print(my_list[-3]) # Output: 3
Surprisingly, it doesn't give us an index error. Using -1 to access an element in a list will give us the last element, -2 will give us the second-to-last element, and so on. This is not required, we could also access elements like this:

my_list = [1, 2, 3, 4, 5]

print(my_list[len(my_list) - 1]) # Output: 5
print(my_list[len(my_list) - 2]) # Output: 4
print(my_list[len(my_list) - 3]) # Output: 3

But the first method, using negative indices, is more concise and very common in Python.